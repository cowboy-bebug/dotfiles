#+TITLE: Literate dotfiles
#+AUTHOR: Eric Lim
#+auto_tangle: t

I use [[https://www.gnu.org/software/stow][stow ]]to manage my configuration files. Here's how it's run:
#+begin_src sh :tangle no
stow -Rv $(ls -d */ | tr "/\n" " ") --target=$HOME
#+end_src

* Table of Contents :TOC:
- [[#alacritty][Alacritty]]
- [[#amethyst][Amethyst]]
- [[#doom-emacs][Doom Emacs]]
  - [[#packages][packages]]
  - [[#init][init]]
  - [[#config][config]]
- [[#git][Git]]
- [[#neovim][Neovim]]
  - [[#plugins][plugins]]
  - [[#lsp][lsp]]
- [[#python][Python]]
- [[#starship][Starship]]
- [[#zsh][Zsh]]

* Alacritty
[[file:alacritty/.config/alacritty/alacritty.toml]]
#+begin_src toml :tangle ./alacritty/.config/alacritty/alacritty.toml
live_config_reload = true

[colors]
draw_bold_text_with_bright_colors = true

[colors.bright]
black = "#5c6370"
blue = "#61afef"
cyan = "#56b6c2"
green = "#98c379"
magenta = "#c678dd"
red = "#e06c75"
white = "#ffffff"
yellow = "#d19a66"

[colors.normal]
black = "#1e2127"
blue = "#61afef"
cyan = "#56b6c2"
green = "#98c379"
magenta = "#c678dd"
red = "#e06c75"
white = "#abb2bf"
yellow = "#d19a66"

[colors.primary]
background = "#282c34"
foreground = "#abb2bf"

[cursor.style]
blinking = "On"
shape = "Underline"

[cursor.vi_mode_style]
shape = "Block"

[font]
size = 14

[font.bold]
family = "Hack Nerd Font"
style = "Bold"

[font.bold_italic]
family = "Hack Nerd Font"
style = "Bold Italic"

[font.italic]
family = "Hack Nerd Font"
style = "Italic"

[font.normal]
family = "Hack Nerd Font"
style = "Regular"

[[keyboard.bindings]]
chars = "\u001Bb"
key = "Left"
mods = "Alt"

[[keyboard.bindings]]
chars = "\u001Bf"
key = "Right"
mods = "Alt"

[[keyboard.bindings]]
action = "ToggleViMode"
key = "Escape"
mode = "~Search"
mods = "Super"

[[keyboard.bindings]]
action = "SearchForward"
key = "F"
mode = "~Search"
mods = "Control|Shift"

[[keyboard.bindings]]
action = "SearchBackward"
key = "F"
mode = "~Search"
mods = "Control"

[scrolling]
history = 10000
multiplier = 10

[selection]
save_to_clipboard = true

[window]
decorations = "buttonless"
opacity = 0.7

[window.padding]
x = 5
y = 5
#+end_src

* Amethyst
[[file:amethyst/.config/amethyst/amethyst.yml]]
#+begin_src yaml :tangle ./amethyst/.config/amethyst/amethyst.yml
layouts:
    - two-pane
    - 3column-left
    - widescreen-tall
    - column
    - tall
    - wide
    - middle-wide

mod1:
    - shift
    - command
mod2:
    - shift
    - control
    - command

relaunch-amethyst:
    mod: mod2
    key: x

focus-main:
  mod: mod2
  key: m

focus-screen-ccw:
  mod: mod2
  key: p
focus-screen-cw:
  mod: mod2
  key: n

select-tall-layout:
  mod: mod2
  key: a
select-wide-layout:
  mod: mod2
  key: s
select-fullscreen-layout:
  mod: mod2
  key: d
select-column-layout:
  mod: mod2
  key: f

reevaluate-windows:
  mod: mod2
  key: z

toggle-focus-follows-mouse:
  mod: mod1
  key: x

relaunch-amethyst:
  mod: mod2
  key: x

focus-follows-mouse: false

window-margins: true
window-margin-size: 8
#+end_src

* Doom Emacs
** packages
[[file:doom/.config/doom/packages.el]]
#+begin_src emacs-lisp :tangle ./doom/.config/doom/packages.el
(package! nov)
(package! org-auto-tangle)
(package! org-superstar)
#+end_src

** init
#+begin_src emacs-lisp :tangle ./doom/.config/doom/init.el
(doom! :input
       ;;bidi              ; (tfel ot) thgir etirw uoy gnipleh
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       company           ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       vertico           ; the search engine of the future

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       ;;doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;;(emoji +unicode)  ; ðŸ™‚
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       ;;indent-guides     ; highlighted indent columns
       ;;ligatures         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       treemacs          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       (vc-gutter +pretty) ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;;window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       ;;zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       (format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       dired             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ibuffer           ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       (spell +flyspell) ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;biblio            ; Writes a PhD for you (citation needed)
       ;;collab            ; buffers with friends
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       lsp               ; M-x vscode
       magit             ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       ;;pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       tree-sitter       ; syntax and parsing, sitting in a tree...
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       ;;tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       ;;(cc +lsp)         ; C > C++ == 1
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       (go +lsp)         ; the hipster dialect
       ;;(graphql +lsp)    ; Give queries a REST
       ;;(haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       json              ; At least it ain't XML
       ;;(java +lsp)       ; the poster child for carpal tunnel syndrome
       javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;latex             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       org               ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;(rust +lsp)       ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       web               ; the tubes
       yaml              ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       ;;(mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       (rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       ;;literate
       (default +bindings +smartparens))
#+end_src

** config
[[file:doom/.config/doom/config.el]]
*** ui
#+begin_src emacs-lisp :tangle ./doom/.config/doom/config.el
(setq doom-theme 'doom-one)

(setq doom-font
      (font-spec
       :family "Roboto Mono"
       :size 14
       :weight 'normal))
(setq doom-variable-pitch-font
      (font-spec
       :family "Georgia"
       :size 20))

(setq display-line-numbers-type 'relative)

(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-footer)
#+end_src

*** org
#+begin_src emacs-lisp :tangle ./doom/.config/doom/config.el
(setq org-directory "~/github.com/cowboy-bebug/org")
(after! org
  (setq org-edit-src-content-indentation nil)
  (setq org-hide-emphasis-markers t)
  (use-package! org-superstar
    :hook
    (org-mode . org-superstar-mode))
  (use-package! org-auto-tangle
    :defer t
    :config
    (setq org-auto-tangle-babel-safelist '("~/github.com/cowboy-bebug/dotfiles/README.org"))
    :hook
    (org-mode . org-auto-tangle-mode)))
#+end_src

*** git
#+begin_src emacs-lisp :tangle ./doom/.config/doom/config.el
(after! magit
  :config
  (setq magit-log-section-commit-count 30))
#+end_src

*** file association
#+begin_src emacs-lisp :tangle ./doom/.config/doom/config.el
(setq auto-mode-alist
      (append '(("\\.mdx\\'" . markdown-mode))
              auto-mode-alist))
#+end_src

*** project
#+begin_src emacs-lisp :tangle ./doom/.config/doom/config.el
(after! projectile
  :config
  (setq projectile-track-known-projects-automatically nil))
#+end_src

*** spell checking
#+begin_src emacs-lisp :tangle ./doom/.config/doom/config.el
(after! flyspell
  :config
  (let ((aspell-personal-directory
         (string-trim-right
          (shell-command-to-string "aspell config home-dir"))))
    (setq ispell-personal-dictionary
          (expand-file-name ".aspell.en.pws"  aspell-personal-directory))))
#+end_src

*** reading
**** epub
#+begin_src emacs-lisp :tangle ./doom/.config/doom/config.el
(use-package! nov
  :mode
  ("\\.epub\\'" . nov-mode)

  :hook
  (add-hook 'nov-mode-hook
            (function lambda()
                      (face-remap-add-relative
                       'variable-pitch
                       :family "Georgia"
                       :height 1.0))))
#+end_src

**** rss
#+begin_src emacs-lisp :tangle ./doom/.config/doom/config.el
(after! elfeed
  :config
  (setq elfeed-search-filter "@1-month-ago +unread")
  (setq elfeed-feeds
        '(("https://feeds.feedburner.com/TheDailyWtf" programming)
          ("https://lobste.rs/rss" programming)
          ("https://www.news.ycombinator.com/rss" programming)
          ("https://www.reddit.com/r/programming/.rss" programming)
          ("https://techcrunch.com/feed" new tech)))
  (setq browse-url-browser-function 'eww-browse-url)
  (set-popup-rules!
    '(("^\\*eww\\*"
       :side right
       :slot 1
       :size #'+popup-shrink-to-fit
       :select t))))
#+end_src

* Git
[[file:git/.config/git/config]]
#+begin_src toml :tangle ./git/.config/git/config
[core]
	pager = less -F -X
[commit]
	gpgsign = true
[diff]
	wsErrorHighlight = all
[format]
	pretty = oneline
[log]
	abbrevCommit = true
[pull]
	rebase = true
[remote "upstream"]
	tagOpt = --no-tags
[user]
	name = Eric Lim
	email = cowboy-bebug@users.noreply.github.com
	signingkey = 3688DD084E73B55E
[push]
	autoSetupRemote = true
#+end_src

* Neovim
[[file:nvim/.config/nvim/init.lua]]
#+begin_src lua :tangle ./nvim/.config/nvim/init.lua
require("plugins")
require("lsp")
require("settings")
require("theme")
#+end_src

[[file:nvim/.config/nvim/lua/settings.lua]]
#+begin_src lua :tangle ./nvim/.config/nvim/lua/settings.lua
-- tab
vim.api.nvim_set_option('expandtab', true)
vim.api.nvim_set_option('smarttab', true)
vim.api.nvim_set_option('shiftwidth', 2)
vim.api.nvim_set_option('tabstop', 2)
-- search
vim.api.nvim_set_option('hlsearch', true)
vim.api.nvim_set_option('incsearch', true)
vim.api.nvim_set_option('ignorecase', true)
vim.api.nvim_set_option('smartcase', true)
-- splits
vim.api.nvim_set_option('splitbelow', true)
vim.api.nvim_set_option('splitright', true)
-- ui
vim.api.nvim_set_option('wrap', false)
vim.api.nvim_set_option('scrolloff', 5)
vim.api.nvim_set_option('termguicolors', true)
vim.api.nvim_set_option('cursorline', true)
vim.api.nvim_set_option('number', true)
vim.api.nvim_set_option('relativenumber', true)
-- miscellaneous
vim.api.nvim_set_option('hidden', true)
vim.api.nvim_set_option('backup', false)
vim.api.nvim_set_option('swapfile', false)
vim.api.nvim_set_option('spell', true)
vim.api.nvim_set_option('fileencoding', 'utf-8')
vim.api.nvim_set_option('mouse', 'a')
vim.api.nvim_set_option('clipboard', 'unnamedplus')
#+end_src

[[file:nvim/.config/nvim/lua/theme.lua]]
#+begin_src lua :tangle ./nvim/.config/nvim/lua/theme.lua
require("onedark").setup({
    style = "dark",
    transparent = true,
    code_style = {
        comment_style = "italic",
    },
})
require("onedark").load()
#+end_src

** plugins
[[file:nvim/.config/nvim/lua/plugins/init.lua]]
#+begin_src lua :tangle ./nvim/.config/nvim/lua/plugins/init.lua
local install_path = vim.fn.stdpath("data") .. "/site/pack/packer/start/packer.nvim"

if vim.fn.empty(vim.fn.glob(install_path)) > 0 then
  packer_bootstrap = vim.fn.system({
    "git",
    "clone",
    "--depth",
    "1",
    "https://github.com/wbthomason/packer.nvim",
    install_path,
  })
end

require("packer").startup(function(use)
  use "wbthomason/packer.nvim"
  use "navarasu/onedark.nvim"

  use "nvim-lualine/lualine.nvim"

  use {
    "nvim-treesitter/nvim-treesitter",
    run = ":TSUpdate",
  }
  use "nvim-treesitter/nvim-treesitter-refactor"

  -- tree
  use {
    "nvim-tree/nvim-tree.lua",
    requires = { "nvim-tree/nvim-web-devicons" }
  }

  -- telescope
  use {
    "nvim-telescope/telescope.nvim",
    requires = {
      "nvim-lua/plenary.nvim",
      { "nvim-telescope/telescope-fzf-native.nvim", run = "make" },
      "nvim-tree/nvim-web-devicons",
    }
  }

  -- cmp
  use {
    "hrsh7th/nvim-cmp",
    requires = {
      "hrsh7th/cmp-buffer",
      "hrsh7th/cmp-path",
      "L3MON4D3/LuaSnip",
      "saadparwaiz1/cmp_luasnip",
      "rafamadriz/friendly-snippets",
    }
  }

  use "hrsh7th/cmp-nvim-lsp" -- LSP source for nvim-cmp
  use "onsails/lspkind-nvim"
  use {
    "williamboman/mason.nvim",
    "williamboman/mason-lspconfig.nvim",
    "neovim/nvim-lspconfig",
  }

  use "lewis6991/gitsigns.nvim"
  use "numToStr/Comment.nvim"

  if packer_bootstrap then require("packer").sync() end
end)

require("Comment").setup()
require("lualine").setup()

require("plugins/gitsigns")
require("plugins/telescope")
require("plugins/tree")
require("plugins/treesitter")
#+end_src

[[file:nvim/.config/nvim/lua/plugins/gitsigns.lua]]
#+begin_src lua :tangle ./nvim/.config/nvim/lua/plugins/gitsigns.lua
local map = vim.api.nvim_set_keymap
local opts = {
    noremap = true,
    silent = true,
}

map("n", "<C-b>", ":Gitsigns toggle_current_line_blame<CR>", opts)

require("gitsigns").setup({
    signs = {
        add = {
            hl = "GitSignsAdd",
            text = "â”‚",
            numhl = "GitSignsAddNr",
            linehl = "GitSignsAddLn",
        },
        change = {
            hl = "GitSignsChange",
            text = "â”‚",
            numhl = "GitSignsChangeNr",
            linehl = "GitSignsChangeLn",
        },
        delete = {
            hl = "GitSignsDelete",
            text = "_",
            numhl = "GitSignsDeleteNr",
            linehl = "GitSignsDeleteLn",
        },
        topdelete = {
            hl = "GitSignsDelete",
            text = "â€¾",
            numhl = "GitSignsDeleteNr",
            linehl = "GitSignsDeleteLn",
        },
        changedelete = {
            hl = "GitSignsChange",
            text = "~",
            numhl = "GitSignsChangeNr",
            linehl = "GitSignsChangeLn",
        },
    },
    signcolumn = true, -- Toggle with `:Gitsigns toggle_signs`
    numhl = false, -- Toggle with `:Gitsigns toggle_numhl`
    linehl = false, -- Toggle with `:Gitsigns toggle_linehl`
    word_diff = false, -- Toggle with `:Gitsigns toggle_word_diff`
    watch_gitdir = {
        interval = 1000,
        follow_files = true,
    },
    attach_to_untracked = true,
    current_line_blame = true,
    current_line_blame_opts = {
        virt_text = true,
        virt_text_pos = "eol", -- 'eol' | 'overlay' | 'right_align'
        delay = 1000,
        ignore_whitespace = false,
    },
    current_line_blame_formatter = "<author>, <author_time:%Y-%m-%d> - <summary>",
    sign_priority = 6,
    update_debounce = 100,
    status_formatter = nil, -- Use default
    max_file_length = 40000,
    preview_config = {
        -- Options passed to nvim_open_win
        border = "single",
        style = "minimal",
        relative = "cursor",
        row = 0,
        col = 1,
    },
    yadm = { enable = false },
})
#+end_src

[[file:nvim/.config/nvim/lua/plugins/telescope.lua]]
#+begin_src lua :tangle ./nvim/.config/nvim/lua/plugins/telescope.lua
local map = vim.api.nvim_set_keymap
local opts = {
    noremap = true,
    silent = true,
}

map("n", "<leader>ff", ":Telescope find_files<CR>", opts)
map("n", "<leader>fg", ":Telescope live_grep<CR>", opts)

require("telescope").setup({
    defaults = {
        file_ignore_patterns = {
            ".git",
            "Cargo.lock",
        },
    },
    pickers = {
        find_files = { hidden = true },
    },
    extensions = {
        fzf = {
            fuzzy = true,
            override_generic_sorter = true,
            override_file_sorter = true,
            case_mode = "smart_case",
        },
    },
})
#+end_src

[[file:nvim/.config/nvim/lua/plugins/tree.lua]]
#+begin_src lua :tangle ./nvim/.config/nvim/lua/plugins/tree.lua
local opts = {
  noremap = true,
  silent = true,
}

vim.api.nvim_set_keymap("n", "<leader>e", ":NvimTreeToggle<CR>", opts)

require("nvim-tree").setup({
  diagnostics = { enable = true },
  filters = {
    dotfiles = false,
    custom = { "^.git$" },
  },
  git = { ignore = false },
})

require("luasnip.loaders.from_vscode").lazy_load()
#+end_src

[[file:nvim/.config/nvim/lua/plugins/treesitter.lua]]
#+begin_src lua :tangle ./nvim/.config/nvim/lua/plugins/treesitter.lua
require("nvim-treesitter.configs").setup({
    ensure_installed = {
        "bash",
        "dockerfile",
        "go",
        "gomod",
        "hcl",
        "http",
        "javascript",
        "json",
        "json5",
        "jsonc",
        "lua",
        "markdown",
        "python",
        "regex",
        "ruby",
        "rust",
        "toml",
        "tsx",
        "typescript",
        "vim",
        "yaml",
    },

    sync_install = false,

    highlight = {
        enable = true,
        additional_vim_regex_highlighting = true,
    },

    refactor = {
        highlight_definitions = {
            enable = true,
            clear_on_cursor_move = true,
        },
        smart_rename = {
            enable = true,
            keymaps = {
                smart_rename = "grr",
            },
        },
        navigation = {
            enable = true,
            keymaps = {
                goto_definition = "gnd",
                list_definitions = "gnD",
                list_definitions_toc = "gO",
                goto_next_usage = "<a-*>",
                goto_previous_usage = "<a-#>",
            },
        },
    },
})
#+end_src

** lsp
[[file:nvim/.config/nvim/lua/lsp/init.lua]]
#+begin_src lua :tangle ./nvim/.config/nvim/lua/lsp/init.lua
-- Mappings.
-- See `:help vim.diagnostic.*` for documentation on any of the below functions
local map = vim.api.nvim_set_keymap
local opts = {
  noremap = true,
  silent = true,
}

map("n", "<space>of", "<cmd>lua vim.diagnostic.open_float()<CR>", opts)
map("n", "[d", "<cmd>lua vim.diagnostic.goto_prev()<CR>", opts)
map("n", "]d", "<cmd>lua vim.diagnostic.goto_next()<CR>", opts)
map("n", "<space>q", "<cmd>lua vim.diagnostic.setloclist()<CR>", opts)

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  -- Enable completion triggered by <c-x><c-o>
  vim.api.nvim_buf_set_option(bufnr, "omnifunc", "v:lua.vim.lsp.omnifunc")

  -- Mappings.
  -- See `:help vim.lsp.*` for documentation on any of the below functions
  local buf_map = vim.api.nvim_buf_set_keymap
  buf_map(bufnr, "n", "gD", "<cmd>lua vim.lsp.buf.declaration()<CR>", opts)
  buf_map(bufnr, "n", "gd", "<cmd>lua vim.lsp.buf.definition()<CR>", opts)
  buf_map(bufnr, "n", "K", "<cmd>lua vim.lsp.buf.hover()<CR>", opts)
  buf_map(bufnr, "n", "gi", "<cmd>lua vim.lsp.buf.implementation()<CR>", opts)
  buf_map(bufnr, "n", "<C-k>", "<cmd>lua vim.lsp.buf.signature_help()<CR>", opts)
  buf_map(bufnr, "n", "<space>D", "<cmd>lua vim.lsp.buf.type_definition()<CR>", opts)
  buf_map(bufnr, "n", "<space>rn", "<cmd>lua vim.lsp.buf.rename()<CR>", opts)
  buf_map(bufnr, "n", "<space>ca", "<cmd>lua vim.lsp.buf.code_action()<CR>", opts)
  buf_map(bufnr, "n", "gr", "<cmd>lua vim.lsp.buf.references()<CR>", opts)
  buf_map(bufnr, "n", "<space>f", "<cmd>lua vim.lsp.buf.formatting()<CR>", opts)

  -- hack: disable diagnostic for helm files
  if vim.bo[bufnr].buftype ~= "" or vim.bo[bufnr].filetype == "helm" then
    vim.diagnostic.disable(bufnr)
    vim.defer_fn(function() vim.diagnostic.reset(nil, bufnr) end, 1000)
  end
end

local capabilities = vim.lsp.protocol.make_client_capabilities()
capabilities = require("cmp_nvim_lsp").default_capabilities(capabilities)

local lsps = {
  "bashls",
  "dockerls",
  "gopls",
  "lua_ls",
  "pyright",
}
require("mason").setup()
require("mason-lspconfig").setup {
  ensure_installed = lsps,
  automatic_installation = true,
}

for _, lsp in pairs(lsps) do
  require("lspconfig")[lsp].setup({
    on_attach = on_attach,
    capabilities = capabilities,
    flags = {
      debounce_text_changes = 150,
    },
    settings = {
      ["rust-analyzer"] = {
        cargo = {
          allFeatures = true,
        },
      },
    },
  })
end

require("lsp/cmp")
#+end_src

[[file:nvim/.config/nvim/lua/lsp/cmp.lua]]
#+begin_src lua :tangle ./nvim/.config/nvim/lua/lsp/cmp.lua
local luasnip = require("luasnip")
local cmp = require("cmp")
local lspkind = require("lspkind")

cmp.setup {
    snippet = {
        expand = function(args) require("luasnip").lsp_expand(args.body) end,
    },
    mapping = {
        ["<C-p>"] = cmp.mapping.select_prev_item(),
        ["<C-n>"] = cmp.mapping.select_next_item(),
        ["<C-d>"] = cmp.mapping.scroll_docs(-4),
        ["<C-f>"] = cmp.mapping.scroll_docs(4),
        ["<C-Space>"] = cmp.mapping.complete(),
        ["<C-e>"] = cmp.mapping.close(),
        ["<CR>"] = cmp.mapping.confirm {
            behavior = cmp.ConfirmBehavior.Replace,
            select = true,
        },
        ["<Tab>"] = function(fallback)
            if cmp.visible() then
                cmp.select_next_item()
            elseif luasnip.expand_or_jumpable() then
                luasnip.expand_or_jump()
            else
                fallback()
            end
        end,
        ["<S-Tab>"] = function(fallback)
            if cmp.visible() then
                cmp.select_prev_item()
            elseif luasnip.jumpable(-1) then
                luasnip.jump(-1)
            else
                fallback()
            end
        end,
    },
    sources = {
        { name = "luasnip" },
        { name = "buffer" },
        { name = "path" },
    },
    formatting = {
        format = lspkind.cmp_format({
            mode = "symbol_text",
            maxwidth = 50,
            -- The function below will be called before any actual modifications from lspkind
            -- so that you can provide more controls on popup customization. (See [#30](https://github.com/onsails/lspkind-nvim/pull/30))
            before = function(entry, vim_item) return vim_item end,
        }),
    },
}
#+end_src

* Python
[[file:python/.config/python/pythonrc][python/.config/python/pythonrc]]
#+begin_src python :tangle ./python/.config/python/pythonrc
import readline

readline.write_history_file = lambda *args: None
#+end_src

* Starship
[[file:starship/.config/starship.toml][starship/.config/starship.toml]]
#+begin_src toml :tangle ./starship/.config/starship.toml
format = """
$directory\
$git_branch $git_commit $git_state $git_metrics $git_status
$cmd_duration
$character
"""

add_newline = false

[character]
error_symbol = "[>](bold red)"
success_symbol = "[>](bold green)"

[cmd_duration]
format = "[\\(took $duration\\)\n](bold yellow)"
min_time = 500
show_milliseconds = true

[directory]
home_symbol = ""

[git_branch]
format = "[{$symbol$branch}]($style)"
only_attached = true
symbol = ""
style = "bold cyan"
#+end_src

* Zsh
[[file:zsh/.config/zsh/.zprofile][zsh/.config/zsh/.zprofile]]
#+begin_src zsh :tangle ./zsh/.config/zsh/.zprofile
# Set PATH, MANPATH, etc., for Homebrew.
eval "$(/opt/homebrew/bin/brew shellenv)"
#+end_src

[[file:zsh/.config/zsh/.zshenv][zsh/.config/zsh/.zshenv]]
#+begin_src zsh :tangle ./zsh/.config/zsh/.zshenv
# ~/.zshenv should source this file:
# echo "source ~/.config/zsh/.zshenv" >> ~/.zshenv

# XDG Base Directory Specification
export XDG_CACHE_HOME="$HOME/.cache"
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_STATE_HOME="$HOME/.local/state"

# XDG_CACHE_HOME
export BUNDLE_USER_CACHE="$XDG_CACHE_HOME/bundle"
export CP_HOME_DIR="$XDG_CACHE_HOME/cocoapod"

# XDG_CONFIG_HOME
export ASPELL_CONF="home-dir $XDG_CONFIG_HOME/aspell"
export BUNDLE_USER_CONFIG="$XDG_CONFIG_HOME/bundle"
export DOCKER_CONFIG="$XDG_CONFIG_HOME/docker"
export NPM_CONFIG_USERCONFIG="$XDG_CONFIG_HOME/npm/npmrc"
export PYTHONSTARTUP="$XDG_CONFIG_HOME/python/pythonrc"
export WGETRC="$XDG_CONFIG_HOME/wgetrc"
export ZDOTDIR="$XDG_CONFIG_HOME/zsh"

# XDG_DATA_HOME
export AZURE_CONFIG_DIR="$XDG_DATA_HOME/azure"
export BUNDLE_USER_PLUGIN="$XDG_DATA_HOME/bundle"
export CARGO_HOME="$XDG_DATA_HOME/cargo"
export GEM_HOME="$XDG_DATA_HOME/gem"
export GOPATH="$XDG_DATA_HOME/go"
export GNUPGHOME="$XDG_DATA_HOME/gnupg"
export IPFS_PATH="$XDG_DATA_HOME/ipfs"
export NVM_DIR="$XDG_DATA_HOME/nvm"
export RBENV_ROOT="$XDG_DATA_HOME/rbenv"
export RUSTUP_HOME="$XDG_DATA_HOME/rustup"
export TERMINFO="$XDG_DATA_HOME/terminfo"
export TERMINFO_DIRS="$XDG_DATA_HOME/terminfo:/usr/share/terminfo"

# paths
export PATH="$GOPATH/bin:$PATH"
export PATH="$XDG_CONFIG_HOME/emacs/bin:$PATH"

# Other exports
export LESSHISTFILE="-"
#+end_src

[[file:zsh/.config/zsh/.zshrc][zsh/.config/zsh/.zshrc]]
#+begin_src zsh :tangle ./zsh/.config/zsh/.zshrc
# colours
autoload -U colors && colors

# options
setopt INTERACTIVE_COMMENTS
setopt SHARE_HISTORY

# history
HISTSIZE=10000
SAVEHIST=10000
HISTFILE_DIR="$XDG_CACHE_HOME/zsh"
HISTFILE="$HISTFILE_DIR/history"
[[ -f $HISTFILE ]] || mkdir -p $HISTFILE_DIR && touch $HISTFILE

# auto / tab complete
autoload -U compinit
zstyle ':completion:*' menu select
zmodload zsh/complist
compinit
_comp_options+=(globdots) # hidden files

# aliases
alias {v,vi,vim}="nvim"
alias ls="ls --color=auto -v"

# editor
export VISUAL="nvim"
export EDITOR=$VISUAL

# git
export GPG_TTY=$(tty)

autoload -U +X bashcompinit && bashcompinit
complete -o nospace -C /usr/local/bin/terraform terraform

# load env
source "$CARGO_HOME/env"

# ZSH plugins
ZSH_PLUGIN_DIR="$XDG_DATA_HOME/zsh"
ZSH_PLUGINS=(
  "$ZSH_PLUGIN_DIR/junegunn/fzf/fzf.zsh"
  "$ZSH_PLUGIN_DIR/Aloxaf/fzf-tab/fzf-tab.plugin.zsh"
  "$ZSH_PLUGIN_DIR/zsh-users/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
  "$ZSH_PLUGIN_DIR/jeffreytse/zsh-vi-mode/zsh-vi-mode.plugin.zsh"
)
for plugin in $ZSH_PLUGINS; do
  [ -f $plugin ] && source $plugin
done

[ -x "$(command -v starship)" ] && eval "$(starship init zsh)"
#+end_src
