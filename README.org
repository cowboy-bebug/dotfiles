#+title: dotfiles
#+property: header-args :results none :dir ~/github.com/cowboy-bebug/dotfiles

My dotfiles are primarily managed by:
- [[https://www.gnu.org/software/stow][stow]] to symlink config files.
- [[https://www.gnu.org/software/gettext/][gettext]]'s ~envsubst~ to template config files.

* Set up
Follow these to set up a new machine exactly how I like it.
** Clone
#+begin_src bash
target="github.com/cowboy-bebug"
mkdir -p $target && cd $target
git clone https://github.com/cowboy-bebug/dotfiles.git
#+end_src

** Stow
#+begin_src bash
find . -mindepth 1 -maxdepth 1 -type d ! -name ".git" -exec basename {} \; | xargs stow -Sv --no-folding --target=$HOME
#+end_src

** Z Shell & Miscellaneous
#+begin_src bash
echo "source ~/.config/zsh/.zshenv" >> ~/.zshenv
source ~/.zshenv

mkdir -p $XDG_DATA_HOME/zsh
cd $XDG_DATA_HOME/zsh
[ ! -d fzf-tab                 ] && git clone https://github.com/Aloxaf/fzf-tab
[ ! -d zsh-syntax-highlighting ] && git clone https://github.com/zsh-users/zsh-syntax-highlighting
[ ! -d zsh-vi-mode             ] && git clone https://github.com/jeffreytse/zsh-vi-mode

cd $XDG_DATA_HOME
[ ! -d alacritty-theme ] && git clone https://github.com/alacritty/alacritty-theme
#+end_src

** Packages
*** MacOS
Install [[https://brew.sh][Homebrew]]:
#+begin_src bash
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
#+end_src

Download the dependencies:
#+begin_src bash
brew bundle --file=Brewfile
#+end_src

** Keys
*** GPG
Set permissions for existing ~gpg~ directory:
#+begin_src bash
chown -R $(whoami) ~/.local/share/gnupg
chown 600 ~/.local/share/gnupg/*
chown 700 ~/.local/share/gnupg
#+end_src

Create a file at ~/tmp/gpg-batch.txt~ with this content:
#+begin_src text :tangle /tmp/gpg-batch.txt
%no-protection
Key-Type: EDDSA
Key-Curve: ed25519
Key-Length: 2048
Subkey-Type: ECDH
Subkey-Curve: cv25519
Name-Real: Eric Lim
Name-Email: eric-lim@idexx.com
Expire-Date: 0
%commit
#+end_src

Run in batch mode:
#+begin_src bash
gpg --batch --generate-key /tmp/gpg-batch.txt
#+end_src

Go to https://github.com/settings/gpg/new to add the key:
#+begin_src
gpg --armor --export [key-id]
#+end_src

Also import my personal key:
#+begin_src bash
gpg --import /Volumes/USB_NAME/mykey.sec.asc
#+end_src

Update trust level:
#+begin_src bash :eval no
gpg --edit-key cowboy-bebug@users.noreply.github.com
gpg> trust  # select 5 (ultimate) when prompted
#+end_src

*** Authentication
Managing multiple GitHub accounts on a single machine has been a challenge. What
worked best for me is to use multiple SSH key pairs with aliases.

Create two sets of SSH keys:
#+begin_src bash :results value
mkdir -p ~/.ssh
chmod 700 ~/.ssh

ssh-keygen -t ed25519 -N "" -q -f ~/.ssh/id_ed25519_work <<< y
ssh-keygen -t ed25519 -N "" -q -f ~/.ssh/id_ed25519_personal <<< y

shopt -s extglob
chmod 600 ~/.ssh/id_ed25519_!(pub)
chmod 644 ~/.ssh/id_ed25519_*.pub
#+end_src

Add this to ~~/.ssh/config~:
#+begin_src conf :tangle ~/.ssh/config :eval no
Host github.com
  HostName github.com
  User git
  IdentityFile ~/.ssh/id_ed25519_work

Host personal.github.com
  HostName github.com
  User git
  IdentityFile ~/.ssh/id_ed25519_personal
#+end_src

Go to https://github.com/settings/ssh/new to add those keys.

** Git
#+begin_src bash
git remote set-url origin git@personal.github.com:cowboy-bebug/dotfiles.git
git set-personal
#+end_src

* Teardown
Follow these steps to delete everything and restore the machine to a
pre-dotfiles state.

** Packages
*** MacOS
#+begin_src bash
brew bundle dump --file=Brewfile --force
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh)"
#+end_src

** GPG
Optionally export:
#+begin_src bash :eval no
gpg --armor --export-secret-keys cowboy-bebug@users.noreply.github.com > /Volumes/USB_NAME/mykey.sec.asc
#+end_src

Delete my personal key:
#+begin_src bash :eval no
gpgconf --kill gpg-agent
gpg --delete-secret-keys 4E73B55E
gpg --delete-keys 4E73B55E
#+end_src

** Unstow
#+begin_src bash
find . -mindepth 1 -maxdepth 1 -type d ! -name ".git" -exec basename {} \; | xargs stow -Dv --no-folding --target=$HOME
#+end_src

** Delete everything
*This will remove dotfiles and all related data. Consider backing up important.*

#+begin_src bash :eval no
rm -rf $GNUPGHOME
rm -rf ~/github.com ~/gitlab.com
rm -rf \
  ~/.config \
  ~/.cache \
  ~/.ssh \
  ~/.zshenv \
  ~/Library/Application\ Support/Mozilla
  ~/Library/Application\ Support/zen
#+end_src
