#+TITLE: Literate dotfiles
#+AUTHOR: Eric Lim
#+auto_tangle: t

I use [[https://www.gnu.org/software/stow][stow ]]to manage my configuration files. Here's how it's run:
#+begin_src sh :tangle no
stow -Rv $(ls -d */ | tr "/\n" " ") --target=$HOME
#+end_src

* Table of Contents :TOC:
- [[#alacritty][Alacritty]]
- [[#amethyst][Amethyst]]
- [[#aspell][Aspell]]
- [[#doom-emacs][Doom Emacs]]
- [[#git][Git]]
- [[#neovim][Neovim]]
  - [[#plugins][plugins]]
  - [[#lsp][lsp]]
- [[#python][Python]]
- [[#starship][Starship]]
- [[#zsh][Zsh]]

* Alacritty
[[file:alacritty/.config/alacritty/alacritty.yml]]
#+begin_src yaml :tangle ./alacritty/.config/alacritty/alacritty.yml
window:
  opacity: 0.7
  padding:
    x: 5
    y: 5
  decorations: buttonless

scrolling:
  history: 10000
  multiplier: 10

font:
  normal:
    family: Hack Nerd Font
    style: Regular
  bold:
    family: Hack Nerd Font
    style: Bold
  italic:
    family: Hack Nerd Font
    style: Italic
  bold_italic:
    family: Hack Nerd Font
    style: Bold Italic
  size: 14

draw_bold_text_with_bright_colors: true

colors:
  primary:
    background: "#282c34"
    foreground: "#abb2bf"
  normal:
    black: "#1e2127"
    red: "#e06c75"
    green: "#98c379"
    yellow: "#d19a66"
    blue: "#61afef"
    magenta: "#c678dd"
    cyan: "#56b6c2"
    white: "#abb2bf"
  bright:
    black: "#5c6370"
    red: "#e06c75"
    green: "#98c379"
    yellow: "#d19a66"
    blue: "#61afef"
    magenta: "#c678dd"
    cyan: "#56b6c2"
    white: "#ffffff"

selection:
  save_to_clipboard: true

cursor:
  style:
    shape: Underline
    blinking: On
  vi_mode_style:
    shape: Block

live_config_reload: true

key_bindings:
  - { key: Left, mods: Alt, chars: "\x1bb" }
  - { key: Right, mods: Alt, chars: "\x1bf" }
  - { key: Escape, mods: Super, mode: ~Search, action: ToggleViMode }
  - { key: F, mods: Control|Shift, mode: ~Search, action: SearchForward }
  - { key: F, mods: Control, mode: ~Search, action: SearchBackward }
#+end_src

* Amethyst
[[file:amethyst/.config/amethyst/amethyst.yml]]
#+begin_src yaml :tangle ./amethyst/.config/amethyst/amethyst.yml
layouts:
    - two-pane
    - 3column-left
    - widescreen-tall
    - column
    - tall
    - wide
    - middle-wide

mod1:
    - shift
    - command
mod2:
    - shift
    - control
    - command

relaunch-amethyst:
    mod: mod2
    key: x

focus-main:
  mod: mod2
  key: m

focus-screen-ccw:
  mod: mod2
  key: p
focus-screen-cw:
  mod: mod2
  key: n

select-tall-layout:
  mod: mod2
  key: a
select-wide-layout:
  mod: mod2
  key: s
select-fullscreen-layout:
  mod: mod2
  key: d
select-column-layout:
  mod: mod2
  key: f

reevaluate-windows:
  mod: mod2
  key: z

toggle-focus-follows-mouse:
  mod: mod1
  key: x

relaunch-amethyst:
  mod: mod2
  key: x

focus-follows-mouse: false

window-margins: true
window-margin-size: 8
#+end_src

* Aspell
[[file:aspell/.config/aspell/.aspell.en.pws]]
#+begin_src text :tangle ./aspell/.config/aspell/.aspell.en.pws
personal_ws-1.1 en 0
api
etag
href
http
isbn
ok
verifier
url
#+end_src

* Doom Emacs
In progress...

* Git
[[file:git/.config/git/config]]
#+begin_src toml :tangle ./git/.config/git/config
[core]
	pager = less -F -X
[commit]
	gpgsign = true
[diff]
	wsErrorHighlight = all
[format]
	pretty = oneline
[log]
	abbrevCommit = true
[pull]
	rebase = true
[remote "upstream"]
	tagOpt = --no-tags
[user]
	name = Eric Lim
	email = cowboy-bebug@users.noreply.github.com
	signingkey = 3688DD084E73B55E
[push]
	autoSetupRemote = true
#+end_src

* Neovim
[[file:nvim/.config/nvim/init.lua]]
#+begin_src lua :tangle ./nvim/.config/nvim/init.lua
require("plugins")
require("lsp")
require("settings")
require("theme")
#+end_src

[[file:nvim/.config/nvim/lua/settings.lua]]
#+begin_src lua :tangle ./nvim/.config/nvim/lua/settings.lua
-- tab
vim.api.nvim_set_option('expandtab', true)
vim.api.nvim_set_option('smarttab', true)
vim.api.nvim_set_option('shiftwidth', 2)
vim.api.nvim_set_option('tabstop', 2)
-- search
vim.api.nvim_set_option('hlsearch', true)
vim.api.nvim_set_option('incsearch', true)
vim.api.nvim_set_option('ignorecase', true)
vim.api.nvim_set_option('smartcase', true)
-- splits
vim.api.nvim_set_option('splitbelow', true)
vim.api.nvim_set_option('splitright', true)
-- ui
vim.api.nvim_set_option('wrap', false)
vim.api.nvim_set_option('scrolloff', 5)
vim.api.nvim_set_option('termguicolors', true)
vim.api.nvim_set_option('cursorline', true)
vim.api.nvim_set_option('number', true)
vim.api.nvim_set_option('relativenumber', true)
-- miscellaneous
vim.api.nvim_set_option('hidden', true)
vim.api.nvim_set_option('backup', false)
vim.api.nvim_set_option('swapfile', false)
vim.api.nvim_set_option('spell', true)
vim.api.nvim_set_option('fileencoding', 'utf-8')
vim.api.nvim_set_option('mouse', 'a')
vim.api.nvim_set_option('clipboard', 'unnamedplus')
#+end_src

[[file:nvim/.config/nvim/lua/theme.lua]]
#+begin_src lua :tangle ./nvim/.config/nvim/lua/theme.lua
require("onedark").setup({
    style = "dark",
    transparent = true,
    code_style = {
        comment_style = "italic",
    },
})
require("onedark").load()
#+end_src

** plugins
[[file:nvim/.config/nvim/lua/plugins/init.lua]]
#+begin_src lua :tangle ./nvim/.config/nvim/lua/plugins/init.lua
local install_path = vim.fn.stdpath("data") .. "/site/pack/packer/start/packer.nvim"

if vim.fn.empty(vim.fn.glob(install_path)) > 0 then
  packer_bootstrap = vim.fn.system({
    "git",
    "clone",
    "--depth",
    "1",
    "https://github.com/wbthomason/packer.nvim",
    install_path,
  })
end

require("packer").startup(function(use)
  use "wbthomason/packer.nvim"
  use "navarasu/onedark.nvim"

  use "nvim-lualine/lualine.nvim"

  use {
    "nvim-treesitter/nvim-treesitter",
    run = ":TSUpdate",
  }
  use "nvim-treesitter/nvim-treesitter-refactor"

  -- tree
  use {
    "nvim-tree/nvim-tree.lua",
    requires = { "nvim-tree/nvim-web-devicons" }
  }

  -- telescope
  use {
    "nvim-telescope/telescope.nvim",
    requires = {
      "nvim-lua/plenary.nvim",
      { "nvim-telescope/telescope-fzf-native.nvim", run = "make" },
      "nvim-tree/nvim-web-devicons",
    }
  }

  -- cmp
  use {
    "hrsh7th/nvim-cmp",
    requires = {
      "hrsh7th/cmp-buffer",
      "hrsh7th/cmp-path",
      "L3MON4D3/LuaSnip",
      "saadparwaiz1/cmp_luasnip",
      "rafamadriz/friendly-snippets",
    }
  }

  use "hrsh7th/cmp-nvim-lsp" -- LSP source for nvim-cmp
  use "onsails/lspkind-nvim"
  use {
    "williamboman/mason.nvim",
    "williamboman/mason-lspconfig.nvim",
    "neovim/nvim-lspconfig",
  }

  use "lewis6991/gitsigns.nvim"
  use "numToStr/Comment.nvim"

  if packer_bootstrap then require("packer").sync() end
end)

require("Comment").setup()
require("lualine").setup()

require("plugins/gitsigns")
require("plugins/telescope")
require("plugins/tree")
require("plugins/treesitter")
#+end_src

[[file:nvim/.config/nvim/lua/plugins/gitsigns.lua]]
#+begin_src lua :tangle ./nvim/.config/nvim/lua/plugins/gitsigns.lua
local map = vim.api.nvim_set_keymap
local opts = {
    noremap = true,
    silent = true,
}

map("n", "<C-b>", ":Gitsigns toggle_current_line_blame<CR>", opts)

require("gitsigns").setup({
    signs = {
        add = {
            hl = "GitSignsAdd",
            text = "│",
            numhl = "GitSignsAddNr",
            linehl = "GitSignsAddLn",
        },
        change = {
            hl = "GitSignsChange",
            text = "│",
            numhl = "GitSignsChangeNr",
            linehl = "GitSignsChangeLn",
        },
        delete = {
            hl = "GitSignsDelete",
            text = "_",
            numhl = "GitSignsDeleteNr",
            linehl = "GitSignsDeleteLn",
        },
        topdelete = {
            hl = "GitSignsDelete",
            text = "‾",
            numhl = "GitSignsDeleteNr",
            linehl = "GitSignsDeleteLn",
        },
        changedelete = {
            hl = "GitSignsChange",
            text = "~",
            numhl = "GitSignsChangeNr",
            linehl = "GitSignsChangeLn",
        },
    },
    signcolumn = true, -- Toggle with `:Gitsigns toggle_signs`
    numhl = false, -- Toggle with `:Gitsigns toggle_numhl`
    linehl = false, -- Toggle with `:Gitsigns toggle_linehl`
    word_diff = false, -- Toggle with `:Gitsigns toggle_word_diff`
    watch_gitdir = {
        interval = 1000,
        follow_files = true,
    },
    attach_to_untracked = true,
    current_line_blame = true,
    current_line_blame_opts = {
        virt_text = true,
        virt_text_pos = "eol", -- 'eol' | 'overlay' | 'right_align'
        delay = 1000,
        ignore_whitespace = false,
    },
    current_line_blame_formatter = "<author>, <author_time:%Y-%m-%d> - <summary>",
    sign_priority = 6,
    update_debounce = 100,
    status_formatter = nil, -- Use default
    max_file_length = 40000,
    preview_config = {
        -- Options passed to nvim_open_win
        border = "single",
        style = "minimal",
        relative = "cursor",
        row = 0,
        col = 1,
    },
    yadm = { enable = false },
})
#+end_src

[[file:nvim/.config/nvim/lua/plugins/telescope.lua]]
#+begin_src lua :tangle ./nvim/.config/nvim/lua/plugins/telescope.lua
local map = vim.api.nvim_set_keymap
local opts = {
    noremap = true,
    silent = true,
}

map("n", "<leader>ff", ":Telescope find_files<CR>", opts)
map("n", "<leader>fg", ":Telescope live_grep<CR>", opts)

require("telescope").setup({
    defaults = {
        file_ignore_patterns = {
            ".git",
            "Cargo.lock",
        },
    },
    pickers = {
        find_files = { hidden = true },
    },
    extensions = {
        fzf = {
            fuzzy = true,
            override_generic_sorter = true,
            override_file_sorter = true,
            case_mode = "smart_case",
        },
    },
})
#+end_src

[[file:nvim/.config/nvim/lua/plugins/tree.lua]]
#+begin_src lua :tangle ./nvim/.config/nvim/lua/plugins/tree.lua
local opts = {
  noremap = true,
  silent = true,
}

vim.api.nvim_set_keymap("n", "<leader>e", ":NvimTreeToggle<CR>", opts)

require("nvim-tree").setup({
  diagnostics = { enable = true },
  filters = {
    dotfiles = false,
    custom = { "^.git$" },
  },
  git = { ignore = false },
})

require("luasnip.loaders.from_vscode").lazy_load()
#+end_src

[[file:nvim/.config/nvim/lua/plugins/treesitter.lua]]
#+begin_src lua :tangle ./nvim/.config/nvim/lua/plugins/treesitter.lua
require("nvim-treesitter.configs").setup({
    ensure_installed = {
        "bash",
        "dockerfile",
        "go",
        "gomod",
        "hcl",
        "http",
        "javascript",
        "json",
        "json5",
        "jsonc",
        "lua",
        "markdown",
        "python",
        "regex",
        "ruby",
        "rust",
        "toml",
        "tsx",
        "typescript",
        "vim",
        "yaml",
    },

    sync_install = false,

    highlight = {
        enable = true,
        additional_vim_regex_highlighting = true,
    },

    refactor = {
        highlight_definitions = {
            enable = true,
            clear_on_cursor_move = true,
        },
        smart_rename = {
            enable = true,
            keymaps = {
                smart_rename = "grr",
            },
        },
        navigation = {
            enable = true,
            keymaps = {
                goto_definition = "gnd",
                list_definitions = "gnD",
                list_definitions_toc = "gO",
                goto_next_usage = "<a-*>",
                goto_previous_usage = "<a-#>",
            },
        },
    },
})
#+end_src

** lsp
[[file:nvim/.config/nvim/lua/lsp/init.lua]]
#+begin_src lua :tangle ./nvim/.config/nvim/lua/lsp/init.lua
-- Mappings.
-- See `:help vim.diagnostic.*` for documentation on any of the below functions
local map = vim.api.nvim_set_keymap
local opts = {
  noremap = true,
  silent = true,
}

map("n", "<space>of", "<cmd>lua vim.diagnostic.open_float()<CR>", opts)
map("n", "[d", "<cmd>lua vim.diagnostic.goto_prev()<CR>", opts)
map("n", "]d", "<cmd>lua vim.diagnostic.goto_next()<CR>", opts)
map("n", "<space>q", "<cmd>lua vim.diagnostic.setloclist()<CR>", opts)

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  -- Enable completion triggered by <c-x><c-o>
  vim.api.nvim_buf_set_option(bufnr, "omnifunc", "v:lua.vim.lsp.omnifunc")

  -- Mappings.
  -- See `:help vim.lsp.*` for documentation on any of the below functions
  local buf_map = vim.api.nvim_buf_set_keymap
  buf_map(bufnr, "n", "gD", "<cmd>lua vim.lsp.buf.declaration()<CR>", opts)
  buf_map(bufnr, "n", "gd", "<cmd>lua vim.lsp.buf.definition()<CR>", opts)
  buf_map(bufnr, "n", "K", "<cmd>lua vim.lsp.buf.hover()<CR>", opts)
  buf_map(bufnr, "n", "gi", "<cmd>lua vim.lsp.buf.implementation()<CR>", opts)
  buf_map(bufnr, "n", "<C-k>", "<cmd>lua vim.lsp.buf.signature_help()<CR>", opts)
  buf_map(bufnr, "n", "<space>D", "<cmd>lua vim.lsp.buf.type_definition()<CR>", opts)
  buf_map(bufnr, "n", "<space>rn", "<cmd>lua vim.lsp.buf.rename()<CR>", opts)
  buf_map(bufnr, "n", "<space>ca", "<cmd>lua vim.lsp.buf.code_action()<CR>", opts)
  buf_map(bufnr, "n", "gr", "<cmd>lua vim.lsp.buf.references()<CR>", opts)
  buf_map(bufnr, "n", "<space>f", "<cmd>lua vim.lsp.buf.formatting()<CR>", opts)

  -- hack: disable diagnostic for helm files
  if vim.bo[bufnr].buftype ~= "" or vim.bo[bufnr].filetype == "helm" then
    vim.diagnostic.disable(bufnr)
    vim.defer_fn(function() vim.diagnostic.reset(nil, bufnr) end, 1000)
  end
end

local capabilities = vim.lsp.protocol.make_client_capabilities()
capabilities = require("cmp_nvim_lsp").default_capabilities(capabilities)

local lsps = {
  "bashls",
  "dockerls",
  "gopls",
  "lua_ls",
  "pyright",
}
require("mason").setup()
require("mason-lspconfig").setup {
  ensure_installed = lsps,
  automatic_installation = true,
}

for _, lsp in pairs(lsps) do
  require("lspconfig")[lsp].setup({
    on_attach = on_attach,
    capabilities = capabilities,
    flags = {
      debounce_text_changes = 150,
    },
    settings = {
      ["rust-analyzer"] = {
        cargo = {
          allFeatures = true,
        },
      },
    },
  })
end

require("lsp/cmp")
#+end_src

[[file:nvim/.config/nvim/lua/lsp/cmp.lua]]
#+begin_src lua :tangle ./nvim/.config/nvim/lua/lsp/cmp.lua
local luasnip = require("luasnip")
local cmp = require("cmp")
local lspkind = require("lspkind")

cmp.setup {
    snippet = {
        expand = function(args) require("luasnip").lsp_expand(args.body) end,
    },
    mapping = {
        ["<C-p>"] = cmp.mapping.select_prev_item(),
        ["<C-n>"] = cmp.mapping.select_next_item(),
        ["<C-d>"] = cmp.mapping.scroll_docs(-4),
        ["<C-f>"] = cmp.mapping.scroll_docs(4),
        ["<C-Space>"] = cmp.mapping.complete(),
        ["<C-e>"] = cmp.mapping.close(),
        ["<CR>"] = cmp.mapping.confirm {
            behavior = cmp.ConfirmBehavior.Replace,
            select = true,
        },
        ["<Tab>"] = function(fallback)
            if cmp.visible() then
                cmp.select_next_item()
            elseif luasnip.expand_or_jumpable() then
                luasnip.expand_or_jump()
            else
                fallback()
            end
        end,
        ["<S-Tab>"] = function(fallback)
            if cmp.visible() then
                cmp.select_prev_item()
            elseif luasnip.jumpable(-1) then
                luasnip.jump(-1)
            else
                fallback()
            end
        end,
    },
    sources = {
        { name = "luasnip" },
        { name = "buffer" },
        { name = "path" },
    },
    formatting = {
        format = lspkind.cmp_format({
            mode = "symbol_text",
            maxwidth = 50,
            -- The function below will be called before any actual modifications from lspkind
            -- so that you can provide more controls on popup customization. (See [#30](https://github.com/onsails/lspkind-nvim/pull/30))
            before = function(entry, vim_item) return vim_item end,
        }),
    },
}
#+end_src

* Python
[[file:python/.config/python/pythonrc][python/.config/python/pythonrc]]
#+begin_src python :tangle ./python/.config/python/pythonrc
import readline

readline.write_history_file = lambda *args: None
#+end_src

* Starship
[[file:starship/.config/starship.toml][starship/.config/starship.toml]]
#+begin_src toml :tangle ./starship/.config/starship.toml
format = """
$directory\
$git_branch $git_commit $git_state $git_metrics $git_status
$cmd_duration
$character
"""

add_newline = false

[character]
error_symbol = "[>](bold red)"
success_symbol = "[>](bold green)"

[cmd_duration]
format = "[\\(took $duration\\)\n](bold yellow)"
min_time = 500
show_milliseconds = true

[directory]
home_symbol = ""

[git_branch]
format = "[{$symbol$branch}]($style)"
only_attached = true
symbol = ""
style = "bold cyan"
#+end_src

* Zsh
[[file:zsh/.config/zsh/.zprofile][zsh/.config/zsh/.zprofile]]
#+begin_src zsh :tangle ./zsh/.config/zsh/.zprofile
# Set PATH, MANPATH, etc., for Homebrew.
eval "$(/opt/homebrew/bin/brew shellenv)"
#+end_src

[[file:zsh/.config/zsh/.zshenv][zsh/.config/zsh/.zshenv]]
#+begin_src zsh :tangle ./zsh/.config/zsh/.zshenv
# ~/.zshenv should source this file:
# echo "source ~/.config/zsh/.zshenv" >> ~/.zshenv

# XDG Base Directory Specification
export XDG_CACHE_HOME="$HOME/.cache"
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_STATE_HOME="$HOME/.local/state"

# XDG_CACHE_HOME
export BUNDLE_USER_CACHE="$XDG_CACHE_HOME/bundle"
export CP_HOME_DIR="$XDG_CACHE_HOME/cocoapod"

# XDG_CONFIG_HOME
export ASPELL_CONF="home-dir $XDG_CONFIG_HOME/aspell"
export BUNDLE_USER_CONFIG="$XDG_CONFIG_HOME/bundle"
export DOCKER_CONFIG="$XDG_CONFIG_HOME/docker"
export NPM_CONFIG_USERCONFIG="$XDG_CONFIG_HOME/npm/npmrc"
export PYTHONSTARTUP="$XDG_CONFIG_HOME/python/pythonrc"
export WGETRC="$XDG_CONFIG_HOME/wgetrc"
export ZDOTDIR="$XDG_CONFIG_HOME/zsh"

# XDG_DATA_HOME
export AZURE_CONFIG_DIR="$XDG_DATA_HOME/azure"
export BUNDLE_USER_PLUGIN="$XDG_DATA_HOME/bundle"
export CARGO_HOME="$XDG_DATA_HOME/cargo"
export GEM_HOME="$XDG_DATA_HOME/gem"
export GOPATH="$XDG_DATA_HOME/go"
export GNUPGHOME="$XDG_DATA_HOME/gnupg"
export IPFS_PATH="$XDG_DATA_HOME/ipfs"
export NVM_DIR="$XDG_DATA_HOME/nvm"
export RBENV_ROOT="$XDG_DATA_HOME/rbenv"
export RUSTUP_HOME="$XDG_DATA_HOME/rustup"
export TERMINFO="$XDG_DATA_HOME/terminfo"
export TERMINFO_DIRS="$XDG_DATA_HOME/terminfo:/usr/share/terminfo"

# paths
export PATH="$GOPATH/bin:$PATH"
export PATH="$XDG_CONFIG_HOME/emacs/bin:$PATH"

# Other exports
export LESSHISTFILE="-"
#+end_src

[[file:zsh/.config/zsh/.zshrc][zsh/.config/zsh/.zshrc]]
#+begin_src zsh :tangle ./zsh/.config/zsh/.zshrc
# colours
autoload -U colors && colors

# options
setopt INTERACTIVE_COMMENTS
setopt SHARE_HISTORY

# history
HISTSIZE=10000
SAVEHIST=10000
HISTFILE_DIR="$XDG_CACHE_HOME/zsh"
HISTFILE="$HISTFILE_DIR/history"
[[ -f $HISTFILE ]] || mkdir -p $HISTFILE_DIR && touch $HISTFILE

# auto / tab complete
autoload -U compinit
zstyle ':completion:*' menu select
zmodload zsh/complist
compinit
_comp_options+=(globdots) # hidden files

# aliases
alias {v,vi,vim}="nvim"
alias ls="ls --color=auto -v"

# editor
export VISUAL="nvim"
export EDITOR=$VISUAL

# git
export GPG_TTY=$(tty)

autoload -U +X bashcompinit && bashcompinit
complete -o nospace -C /usr/local/bin/terraform terraform

# load env
source "$CARGO_HOME/env"

# ZSH plugins
ZSH_PLUGIN_DIR="$XDG_DATA_HOME/zsh"
ZSH_PLUGINS=(
  "$ZSH_PLUGIN_DIR/junegunn/fzf/fzf.zsh"
  "$ZSH_PLUGIN_DIR/Aloxaf/fzf-tab/fzf-tab.plugin.zsh"
  "$ZSH_PLUGIN_DIR/zsh-users/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
  "$ZSH_PLUGIN_DIR/jeffreytse/zsh-vi-mode/zsh-vi-mode.plugin.zsh"
)
for plugin in $ZSH_PLUGINS; do
  [ -f $plugin ] && source $plugin
done

[ -x "$(command -v starship)" ] && eval "$(starship init zsh)"
#+end_src
